package com.refactorlabs.cs378.assign5;
import com.refactorlabs.cs378.utils.Utils;

import java.io.IOException;
import java.util.HashMap;
import java.util.StringTokenizer;

import org.apache.avro.mapred.AvroValue;
import org.apache.avro.mapreduce.AvroJob;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.MRJobConfig;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;


/**
 * Created by Jong Hoon Lim on 10/5/15.
 */

public class WordStatistics extends Configured implements Tool {

    /**
     * Map class for WordStatistics that uses AVRO generated class WordStatisticsData
     */
    public static class MapperClass extends Mapper<LongWritable, Text, Text, AvroValue<WordStatisticsData>> {

        /**
         * Local variable "word" will contain the word identified in the input.
         */
        private Text word = new Text();

        // for the mapper to count the words
        private final HashMap<String, Long> wordCount = new HashMap<String, Long>();

        @Override
        public void map(LongWritable key, Text value, Context context)
                throws IOException, InterruptedException {
            // read in line and make a tokenizer
            String line = value.toString();
            StringTokenizer stringTokenizer = new StringTokenizer(line);

            context.getCounter(Utils.MAPPER_COUNTER_GROUP, "Input Lines").increment(1L);

            // clear the HashMap for each paragraph
            wordCount.clear();

            while (stringTokenizer.hasMoreTokens()) {
                String token = stringTokenizer.nextToken();

                // store the word in our HashMap
                if (wordCount.containsKey(token)) {
                    wordCount.put(token, wordCount.get(token) + 1L);
                } else {
                    wordCount.put(token, 1L);
                }
            }

            // create output value for each word, pass on to reducer
            for (String hashKey : wordCount.keySet()) {
                long count = wordCount.get(hashKey);

                // use WordStatisticsData class auto generated by Avro
                WordStatisticsData.Builder builder = WordStatisticsData.newBuilder();
                builder.setDocumentCount(1L);
                builder.setTotalCount(count);
                builder.setSumOfSquares(count * count);
                // need default value for now
                builder.setMean(0.0);
                builder.setVariance(0.0);

                // to output to reducer
                word = new Text(hashKey);
                context.write(word, new AvroValue(builder.build()));
            }
        }
    }

    /**
     * The Reduce class for WordStatistics. Extends class Reducer, provided by Hadoop.
     */
    public static class ReduceClass extends Reducer<Text, AvroValue<WordStatisticsData>,
            Text, AvroValue<WordStatisticsData>> {

        @Override
        public void reduce(Text key, Iterable<AvroValue<WordStatisticsData>> values, Context context)
                throws IOException, InterruptedException {
            long documentCount = 0L;
            long totalCount = 0L;
            long sumOfSquares = 0;

            // sum up the count for the current word
            for (AvroValue<WordStatisticsData> word : values) {
                documentCount += word.datum().getDocumentCount();
                totalCount += word.datum().getTotalCount();
                sumOfSquares += word.datum().getSumOfSquares();
            }

            // get the word's mean and variance
            double mean = 1.0 * totalCount / documentCount;
            double variance = 1.0 * sumOfSquares / documentCount - mean * mean;

            // finalize each word
            WordStatisticsData.Builder builder = WordStatisticsData.newBuilder();
            builder.setDocumentCount(documentCount);
            builder.setTotalCount(totalCount);
            builder.setSumOfSquares(sumOfSquares);
            builder.setMean(mean);
            builder.setVariance(variance);

            // output
            context.write(key, new AvroValue(builder.build()));
        }
    }

    /**
     * The run() method is called (indirectly) from main(), and contains all the job
     * setup and configuration.
     */
    public int run(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: WordStatistics <input path> <output path>");
            return -1;
        }

        Configuration conf = getConf();

        // Use this JAR first in the classpath (We also set a bootstrap script in AWS)
        conf.setBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, true);

        Job job = Job.getInstance(conf, "WordStatistics");
        String[] appArgs = new GenericOptionsParser(conf, args).getRemainingArgs();

        // Identify the JAR file to replicate to all machines.
        job.setJarByClass(WordStatistics.class);

        // Specify the Map
        job.setInputFormatClass(TextInputFormat.class);
        job.setMapperClass(MapperClass.class);
        job.setMapOutputKeyClass(Text.class);
        AvroJob.setMapOutputValueSchema(job, WordStatisticsData.getClassSchema());

        // Specify the Reduce
        job.setOutputFormatClass(TextOutputFormat.class);
        job.setReducerClass(ReduceClass.class);
        job.setOutputKeyClass(Text.class);
        AvroJob.setOutputValueSchema(job, WordStatisticsData.getClassSchema());

        // Grab the input file and output directory from the command line.
        FileInputFormat.addInputPaths(job, appArgs[0]);
        FileOutputFormat.setOutputPath(job, new Path(appArgs[1]));

        // Initiate the map-reduce job, and wait for completion.
        job.waitForCompletion(true);

        return 0;
    }

    /**
     * The main method specifies the characteristics of the map-reduce job
     * by setting values on the Job object, and then initiates the map-reduce
     * job and waits for it to complete.
     */
    public static void main(String[] args) throws Exception {
        Utils.printClassPath();
        int res = ToolRunner.run(new Configuration(), new WordStatistics(), args);
        System.exit(res);
    }
}